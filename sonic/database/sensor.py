from sqlalchemy import Column
from sqlalchemy import Integer
from sqlalchemy import String
from sqlalchemy.orm import relationship

from .base import Base


class Sensor(Base):  # type: ignore
    """Sensor object"""

    __tablename__ = "sensor"
    id = Column(Integer, primary_key=True)
    """int: Sensor database ID"""

    name = Column(String)
    """str: Sensor name"""

    subname = Column(String)
    """str: Sensor subname"""

    manufacturer = Column(String)
    """str: Sensor manufacturer"""

    type_class = Column(String)
    """str: Sensor type class"""

    number_of_channels = Column(Integer)

    channels = relationship(
        "sonic.database.channel.Channel",
        back_populates="sensor",
        enable_typechecks=False,
    )
    """list: list of Sensor channels"""

    samples = relationship(
        "sonic.database.sample.Sample", back_populates="sensor", enable_typechecks=False
    )
    """list: list of samples generated by the sensor audio files"""

    files = relationship(
        "sonic.database.file.File", back_populates="sensor", enable_typechecks=False
    )
    """list: list of files recorded by the sensor"""

    classifications = relationship(
        "sonic.database.classification.Classification",
        back_populates="sensor",
        enable_typechecks=False,
    )

    __mapper_args__ = {"polymorphic_identity": "sensor"}

    def __repr__(self) -> str:  # pragma: no cover
        return f"Sensor: {self.name} - {self.subname}"
